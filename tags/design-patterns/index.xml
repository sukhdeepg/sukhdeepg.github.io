<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>design patterns on Sukhdeep&#39;s Blog</title>
    <link>https://sukhdeepg.github.io/tags/design-patterns/</link>
    <description>Recent content in design patterns on Sukhdeep&#39;s Blog</description>
    <image>
      <title>Sukhdeep&#39;s Blog</title>
      <url>https://sukhdeepg.github.io/</url>
      <link>https://sukhdeepg.github.io/</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 01 May 2023 11:10:03 +0530</lastBuildDate><atom:link href="https://sukhdeepg.github.io/tags/design-patterns/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Factory Method with examples in Python</title>
      <link>https://sukhdeepg.github.io/posts/factory-method/</link>
      <pubDate>Mon, 01 May 2023 11:10:03 +0530</pubDate>
      
      <guid>https://sukhdeepg.github.io/posts/factory-method/</guid>
      <description>The Factory Method is a creational design pattern which is great for managing object creation in a clean, modular, and scalable way. It promotes loose coupling and code reusability. This pattern comes handy when we have multiple object types with a shared interface or base class, and we want to create new objects based on a given parameter without hardcoding the exact classes. Let&amp;rsquo;s understand the above with an example:</description>
    </item>
    
  </channel>
</rss>
